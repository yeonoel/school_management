{"version":3,"file":"urql-core-chunk.min.js","sources":["../src/utils/error.ts","../src/utils/hash.ts","../src/utils/variables.ts","../src/utils/request.ts","../src/utils/result.ts","../src/internal/fetchOptions.ts","../src/internal/fetchSource.ts"],"sourcesContent":["import { GraphQLError } from '@0no-co/graphql.web';\nimport { ErrorLike } from '../types';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr) return `[Network] ${networkErr.message}`;\n  if (graphQlErrs) {\n    for (const err of graphQlErrs) {\n      if (error) error += '\\n';\n      error += `[GraphQL] ${err.message}`;\n    }\n  }\n  return error;\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (\n    error &&\n    error.message &&\n    (error.extensions || error.name === 'GraphQLError')\n  ) {\n    return error;\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error,\n      error.extensions || {}\n    );\n  } else {\n    return new GraphQLError(error as any);\n  }\n};\n\n/** An abstracted `Error` that provides either a `networkError` or `graphQLErrors`.\n *\n * @remarks\n * During a GraphQL request, either the request can fail entirely, causing a network error,\n * or the GraphQL execution or fields can fail, which will cause an {@link ExecutionResult}\n * to contain an array of GraphQL errors.\n *\n * The `CombinedError` abstracts and normalizes both failure cases. When {@link OperationResult.error}\n * is set to this error, the `CombinedError` abstracts all errors, making it easier to handle only\n * a subset of error cases.\n *\n * @see {@link https://urql.dev/goto/docs/basics/errors} for more information on handling\n * GraphQL errors and the `CombinedError`.\n */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n\n  /** A list of GraphQL errors rehydrated from a {@link ExecutionResult}.\n   *\n   * @remarks\n   * If an {@link ExecutionResult} received from the API contains a list of errors,\n   * the `CombinedError` will rehydrate them, normalize them to\n   * {@link GraphQLError | GraphQLErrors} and list them here.\n   * An empty list indicates that no GraphQL error has been sent by the API.\n   */\n  public graphQLErrors: GraphQLError[];\n\n  /** Set to an error, if a GraphQL request has failed outright.\n   *\n   * @remarks\n   * A GraphQL over HTTP request may fail and not reach the API. Any error that\n   * prevents a GraphQl request outright, will be considered a “network error” and\n   * set here.\n   */\n  public networkError?: Error;\n\n  /** Set to the {@link Response} object a fetch exchange received.\n   *\n   * @remarks\n   * If a built-in fetch {@link Exchange} is used in `urql`, this may\n   * be set to the {@link Response} object of the Fetch API response.\n   * However, since `urql` doesn’t assume that all users will use HTTP\n   * as the only or exclusive transport for GraphQL this property is\n   * neither typed nor guaranteed and may be re-used for other purposes\n   * by non-fetch exchanges.\n   *\n   * Hint: It can be useful to use `response.status` here, however, if\n   * you plan on relying on this being a {@link Response} in your app,\n   * which it is by default, then make sure you add some extra checks\n   * before blindly assuming so!\n   */\n  public response?: any;\n\n  constructor(input: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | ErrorLike>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (input.graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(\n      input.networkError,\n      normalizedGraphQLErrors\n    );\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = input.networkError;\n    this.response = input.response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","/** A hash value as computed by {@link phash}.\n *\n * @remarks\n * Typically `HashValue`s are used as hashes and keys of GraphQL documents,\n * variables, and combined, for GraphQL requests.\n */\nexport type HashValue = number & {\n  /** Marker to indicate that a `HashValue` may not be created by a user.\n   *\n   * @remarks\n   * `HashValue`s are created by {@link phash} and are marked as such to not mix them\n   * up with other numbers and prevent them from being created or used outside of this\n   * hashing function.\n   *\n   * @internal\n   */\n  readonly _opaque: unique symbol;\n};\n\n/** Computes a djb2 hash of the given string.\n *\n * @param x - the string to be hashed\n * @param seed - optionally a prior hash for progressive hashing\n * @returns a hash value, i.e. a number\n *\n * @remark\n * This is the hashing function used throughout `urql`, primarily to compute\n * {@link Operation.key}.\n *\n * @see {@link http://www.cse.yorku.ca/~oz/hash.html#djb2} for a further description of djb2.\n */\nexport const phash = (x: string, seed?: HashValue): HashValue => {\n  let h = (seed || 5381) | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++)\n    h = (h << 5) + h + x.charCodeAt(i);\n  return h as HashValue;\n};\n","export type FileMap = Map<string, File | Blob>;\n\nconst seen = new Set();\nconst cache = new WeakMap();\n\nconst stringify = (x: any): string => {\n  if (x === null || seen.has(x)) {\n    return 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x) || '';\n  } else if (x.toJSON) {\n    return stringify(x.toJSON());\n  } else if (Array.isArray(x)) {\n    let out = '[';\n    for (const value of x) {\n      if (out.length > 1) out += ',';\n      out += stringify(value) || 'null';\n    }\n    out += ']';\n    return out;\n  } else if (\n    (FileConstructor !== NoopConstructor && x instanceof FileConstructor) ||\n    (BlobConstructor !== NoopConstructor && x instanceof BlobConstructor)\n  ) {\n    return 'null';\n  }\n\n  const keys = Object.keys(x).sort();\n  if (!keys.length && x.constructor && x.constructor !== Object) {\n    const key = cache.get(x) || Math.random().toString(36).slice(2);\n    cache.set(x, key);\n    return stringify({ __key: key });\n  }\n\n  seen.add(x);\n  let out = '{';\n  for (const key of keys) {\n    const value = stringify(x[key]);\n    if (value) {\n      if (out.length > 1) out += ',';\n      out += stringify(key) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nconst extract = (map: FileMap, path: string, x: any) => {\n  if (x == null || typeof x !== 'object' || x.toJSON || seen.has(x)) {\n    /*noop*/\n  } else if (Array.isArray(x)) {\n    for (let i = 0, l = x.length; i < l; i++)\n      extract(map, `${path}.${i}`, x[i]);\n  } else if (x instanceof FileConstructor || x instanceof BlobConstructor) {\n    map.set(path, x as File | Blob);\n  } else {\n    seen.add(x);\n    for (const key of Object.keys(x)) extract(map, `${path}.${key}`, x[key]);\n  }\n};\n\n/** A stable stringifier for GraphQL variables objects.\n *\n * @param x - any JSON-like data.\n * @return A JSON string.\n *\n * @remarks\n * This utility creates a stable JSON string from any passed data,\n * and protects itself from throwing.\n *\n * The JSON string is stable insofar as objects’ keys are sorted,\n * and instances of non-plain objects are replaced with random keys\n * replacing their values, which remain stable for the objects’\n * instance.\n */\nexport const stringifyVariables = (x: any): string => {\n  seen.clear();\n  return stringify(x);\n};\n\nclass NoopConstructor {}\nconst FileConstructor = typeof File !== 'undefined' ? File : NoopConstructor;\nconst BlobConstructor = typeof Blob !== 'undefined' ? Blob : NoopConstructor;\n\nexport const extractFiles = (x: any): FileMap => {\n  const map: FileMap = new Map();\n  if (\n    FileConstructor !== NoopConstructor ||\n    BlobConstructor !== NoopConstructor\n  ) {\n    seen.clear();\n    extract(map, 'variables', x);\n  }\n  return map;\n};\n","import { Kind, parse, print } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './graphql';\nimport { HashValue, phash } from './hash';\nimport { stringifyVariables } from './variables';\n\nimport type {\n  DocumentInput,\n  TypedDocumentNode,\n  AnyVariables,\n  GraphQLRequest,\n  RequestExtensions,\n} from '../types';\n\n/** A `DocumentNode` annotated with its hashed key.\n * @internal\n */\nexport type KeyedDocumentNode = TypedDocumentNode & {\n  __key: HashValue;\n};\n\nconst SOURCE_NAME = 'gql';\nconst GRAPHQL_STRING_RE = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nconst REPLACE_CHAR_RE = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\n\nconst replaceOutsideStrings = (str: string, idx: number) =>\n  idx % 2 === 0 ? str.replace(REPLACE_CHAR_RE, '\\n') : str;\n\n/** Sanitizes a GraphQL document string by replacing comments and redundant newlines in it. */\nconst sanitizeDocument = (node: string): string =>\n  node.split(GRAPHQL_STRING_RE).map(replaceOutsideStrings).join('').trim();\n\nconst prints = new Map<DocumentNode | DefinitionNode, string>();\nconst docs = new Map<HashValue, KeyedDocumentNode>();\n\n/** A cached printing function for GraphQL documents.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A normalized printed string of the passed GraphQL document.\n *\n * @remarks\n * This function accepts a GraphQL query string or {@link DocumentNode},\n * then prints and sanitizes it. The sanitizer takes care of removing\n * comments, which otherwise alter the key of the document although the\n * document is otherwise equivalent to another.\n *\n * When a {@link DocumentNode} is passed to this function, it caches its\n * output by modifying the `loc.source.body` property on the GraphQL node.\n */\nexport const stringifyDocument = (\n  node: string | DefinitionNode | DocumentNode\n): string => {\n  let printed: string;\n  if (typeof node === 'string') {\n    printed = sanitizeDocument(node);\n  } else if (node.loc && docs.get((node as KeyedDocumentNode).__key) === node) {\n    printed = node.loc.source.body;\n  } else {\n    printed = prints.get(node) || sanitizeDocument(print(node));\n    prints.set(node, printed);\n  }\n\n  if (typeof node !== 'string' && !node.loc) {\n    (node as any).loc = {\n      start: 0,\n      end: printed.length,\n      source: {\n        body: printed,\n        name: SOURCE_NAME,\n        locationOffset: { line: 1, column: 1 },\n      },\n    };\n  }\n\n  return printed;\n};\n\n/** Computes the hash for a document's string using {@link stringifyDocument}'s output.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link HashValue}\n *\n * @privateRemarks\n * This function adds the operation name of the document to the hash, since sometimes\n * a merged document with multiple operations may be used. Although `urql` requires a\n * `DocumentNode` to only contain a single operation, when the cached `loc.source.body`\n * of a `DocumentNode` is used, this string may still contain multiple operations and\n * the resulting hash should account for only one at a time.\n */\nconst hashDocument = (\n  node: string | DefinitionNode | DocumentNode\n): HashValue => {\n  let key = phash(stringifyDocument(node));\n  // Add the operation name to the produced hash\n  if ((node as DocumentNode).definitions) {\n    const operationName = getOperationName(node as DocumentNode);\n    if (operationName) key = phash(`\\n# ${operationName}`, key);\n  }\n  return key;\n};\n\n/** Returns a canonical version of the passed `DocumentNode` with an added hash key.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link KeyedDocumentNode}\n *\n * @remarks\n * `urql` will always avoid unnecessary work, no matter whether a user passes `DocumentNode`s\n * or strings of GraphQL documents to its APIs.\n *\n * This function will return a canonical version of a {@link KeyedDocumentNode} no matter\n * which kind of input is passed, avoiding parsing or hashing of passed data as needed.\n */\nexport const keyDocument = (node: string | DocumentNode): KeyedDocumentNode => {\n  let key: HashValue;\n  let query: DocumentNode;\n  if (typeof node === 'string') {\n    key = hashDocument(node);\n    query = docs.get(key) || parse(node, { noLocation: true });\n  } else {\n    key = (node as KeyedDocumentNode).__key || hashDocument(node);\n    query = docs.get(key) || node;\n  }\n\n  // Add location information if it's missing\n  if (!query.loc) stringifyDocument(query);\n\n  (query as KeyedDocumentNode).__key = key;\n  docs.set(key, query as KeyedDocumentNode);\n  return query as KeyedDocumentNode;\n};\n\n/** Creates a `GraphQLRequest` from the passed parameters.\n *\n * @param q - A string of a document or a {@link DocumentNode}\n * @param variables - A variables object for the defined GraphQL operation.\n * @returns A {@link GraphQLRequest}\n *\n * @remarks\n * `createRequest` creates a {@link GraphQLRequest} from the passed parameters,\n * while replacing the document as needed with a canonical version of itself,\n * to avoid parsing, printing, or hashing the same input multiple times.\n *\n * If no variables are passed, canonically it'll default to an empty object,\n * which is removed from the resulting hash key.\n */\nexport const createRequest = <\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  _query: DocumentInput<Data, Variables>,\n  _variables: Variables,\n  extensions?: RequestExtensions | undefined\n): GraphQLRequest<Data, Variables> => {\n  const variables = _variables || ({} as Variables);\n  const query = keyDocument(_query);\n  const printedVars = stringifyVariables(variables);\n  let key = query.__key;\n  if (printedVars !== '{}') key = phash(printedVars, key);\n  return { key, query, variables, extensions };\n};\n\n/** Returns the name of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's name contained within the document, or `undefined`\n */\nexport const getOperationName = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.name ? node.name.value : undefined;\n    }\n  }\n};\n\n/** Returns the type of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's type contained within the document, or `undefined`\n */\nexport const getOperationType = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.operation;\n    }\n  }\n};\n","import {\n  ExecutionResult,\n  Operation,\n  OperationResult,\n  IncrementalPayload,\n} from '../types';\nimport { CombinedError } from './error';\n\n/** Converts the `ExecutionResult` received for a given `Operation` to an `OperationResult`.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param result - The GraphQL API’s {@link ExecutionResult}.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n *\n * @throws\n * If no data, or errors are contained within the result, or the result is instead an incremental\n * response containing a `path` property, a “No Content” error is thrown.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const makeResult = (\n  operation: Operation,\n  result: ExecutionResult,\n  response?: any\n): OperationResult => {\n  if (!('data' in result) && !('errors' in result)) {\n    throw new Error('No Content');\n  }\n\n  const defaultHasNext = operation.kind === 'subscription';\n  return {\n    operation,\n    data: result.data,\n    error: Array.isArray(result.errors)\n      ? new CombinedError({\n          graphQLErrors: result.errors,\n          response,\n        })\n      : undefined,\n    extensions: result.extensions ? { ...result.extensions } : undefined,\n    hasNext: result.hasNext == null ? defaultHasNext : result.hasNext,\n    stale: false,\n  };\n};\n\nconst deepMerge = (target: any, source: any) => {\n  if (typeof target === 'object' && target != null) {\n    if (\n      !target.constructor ||\n      target.constructor === Object ||\n      Array.isArray(target)\n    ) {\n      target = Array.isArray(target) ? [...target] : { ...target };\n      for (const key of Object.keys(source))\n        target[key] = deepMerge(target[key], source[key]);\n      return target;\n    }\n  }\n  return source;\n};\n\n/** Merges an incrementally delivered `ExecutionResult` into a previous `OperationResult`.\n *\n * @param prevResult - The {@link OperationResult} that preceded this result.\n * @param path - The GraphQL API’s {@link ExecutionResult} that should be patching the `prevResult`.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns A new {@link OperationResult} patched with the incremental result.\n *\n * @remarks\n * This utility should be used to merge subsequent {@link ExecutionResult | ExecutionResults} of\n * incremental responses into a prior {@link OperationResult}.\n *\n * When directives like `@defer`, `@stream`, and `@live` are used, GraphQL may deliver new\n * results that modify previous results. In these cases, it'll set a `path` property to modify\n * the result it sent last. This utility is built to handle these cases and merge these payloads\n * into existing {@link OperationResult | OperationResults}.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const mergeResultPatch = (\n  prevResult: OperationResult,\n  nextResult: ExecutionResult,\n  response?: any\n): OperationResult => {\n  let errors = prevResult.error ? prevResult.error.graphQLErrors : [];\n  let hasExtensions = !!prevResult.extensions || !!nextResult.extensions;\n  const extensions = { ...prevResult.extensions, ...nextResult.extensions };\n\n  let incremental = nextResult.incremental;\n\n  // NOTE: We handle the old version of the incremental delivery payloads as well\n  if ('path' in nextResult) {\n    incremental = [nextResult as IncrementalPayload];\n  }\n\n  const withData = { data: prevResult.data };\n  if (incremental) {\n    for (const patch of incremental) {\n      if (Array.isArray(patch.errors)) {\n        errors.push(...(patch.errors as any));\n      }\n\n      if (patch.extensions) {\n        Object.assign(extensions, patch.extensions);\n        hasExtensions = true;\n      }\n\n      let prop: string | number = 'data';\n      let part: Record<string, any> | Array<any> = withData;\n      for (let i = 0, l = patch.path.length; i < l; prop = patch.path[i++]) {\n        part = part[prop] = Array.isArray(part[prop])\n          ? [...part[prop]]\n          : { ...part[prop] };\n      }\n\n      if (patch.items) {\n        const startIndex = +prop >= 0 ? (prop as number) : 0;\n        for (let i = 0, l = patch.items.length; i < l; i++)\n          part[startIndex + i] = deepMerge(\n            part[startIndex + i],\n            patch.items[i]\n          );\n      } else if (patch.data !== undefined) {\n        part[prop] = deepMerge(part[prop], patch.data);\n      }\n    }\n  } else {\n    withData.data = nextResult.data || prevResult.data;\n    errors = (nextResult.errors as any[]) || errors;\n  }\n\n  return {\n    operation: prevResult.operation,\n    data: withData.data,\n    error: errors.length\n      ? new CombinedError({ graphQLErrors: errors, response })\n      : undefined,\n    extensions: hasExtensions ? extensions : undefined,\n    hasNext:\n      nextResult.hasNext != null ? nextResult.hasNext : prevResult.hasNext,\n    stale: false,\n  };\n};\n\n/** Creates an `OperationResult` containing a network error for requests that encountered unexpected errors.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param error - The network-like error that prevented an API result from being delivered.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult} containing only a {@link CombinedError}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n * This function should be used for when the {@link CombinedError.networkError} property is\n * populated and no GraphQL execution actually occurred.\n */\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n  hasNext: false,\n  stale: false,\n});\n","import {\n  stringifyDocument,\n  getOperationName,\n  stringifyVariables,\n  extractFiles,\n} from '../utils';\n\nimport { AnyVariables, GraphQLRequest, Operation } from '../types';\n\n/** Abstract definition of the JSON data sent during GraphQL HTTP POST requests. */\nexport interface FetchBody {\n  query?: string;\n  operationName: string | undefined;\n  variables: undefined | Record<string, any>;\n  extensions: undefined | Record<string, any>;\n}\n\n/** Creates a GraphQL over HTTP compliant JSON request body.\n * @param request - An object containing a `query` document and `variables`.\n * @returns A {@link FetchBody}\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n */\nexport function makeFetchBody<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(request: Omit<GraphQLRequest<Data, Variables>, 'key'>): FetchBody {\n  const isAPQ =\n    request.extensions &&\n    request.extensions.persistedQuery &&\n    !request.extensions.persistedQuery.miss;\n  return {\n    query: isAPQ ? undefined : stringifyDocument(request.query),\n    operationName: getOperationName(request.query),\n    variables: request.variables || undefined,\n    extensions: request.extensions,\n  };\n}\n\n/** Creates a URL that will be called for a GraphQL HTTP request.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which may be replaced with a URL.\n *\n * @remarks\n * Creates the URL that’ll be called as part of a GraphQL HTTP request.\n * Built-in fetch exchanges support sending GET requests, even for\n * non-persisted full requests, which this function supports by being\n * able to serialize GraphQL requests into the URL.\n */\nexport const makeFetchURL = (\n  operation: Operation,\n  body?: FetchBody\n): string => {\n  const useGETMethod =\n    operation.kind === 'query' && operation.context.preferGetMethod;\n  if (!useGETMethod || !body) return operation.context.url;\n\n  const url = new URL(operation.context.url);\n  for (const key in body) {\n    const value = body[key];\n    if (value) {\n      url.searchParams.set(\n        key,\n        typeof value === 'object' ? stringifyVariables(value) : value\n      );\n    }\n  }\n\n  const finalUrl = url.toString();\n  if (finalUrl.length > 2047 && useGETMethod !== 'force') {\n    operation.context.preferGetMethod = false;\n    return operation.context.url;\n  }\n\n  return finalUrl;\n};\n\n/** Serializes a {@link FetchBody} into a {@link RequestInit.body} format. */\nconst serializeBody = (\n  operation: Operation,\n  body?: FetchBody\n): FormData | string | undefined => {\n  const omitBody =\n    operation.kind === 'query' && !!operation.context.preferGetMethod;\n  if (body && !omitBody) {\n    const json = stringifyVariables(body);\n    const files = extractFiles(body.variables);\n    if (files.size) {\n      const form = new FormData();\n      form.append('operations', json);\n      form.append(\n        'map',\n        stringifyVariables({\n          ...[...files.keys()].map(value => [value]),\n        })\n      );\n      let index = 0;\n      for (const file of files.values()) form.append(`${index++}`, file);\n      return form;\n    }\n    return json;\n  }\n};\n\n/** Creates a `RequestInit` object for a given `Operation`.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which is added to the options, if the request isn’t a GET request.\n *\n * @remarks\n * Creates the fetch options {@link RequestInit} object that’ll be passed to the Fetch API\n * as part of a GraphQL over HTTP request. It automatically sets a default `Content-Type`\n * header.\n *\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport const makeFetchOptions = (\n  operation: Operation,\n  body?: FetchBody\n): RequestInit => {\n  const headers: HeadersInit = {\n    accept:\n      operation.kind === 'subscription'\n        ? 'text/event-stream, multipart/mixed'\n        : 'application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed',\n  };\n  const extraOptions =\n    (typeof operation.context.fetchOptions === 'function'\n      ? operation.context.fetchOptions()\n      : operation.context.fetchOptions) || {};\n  if (extraOptions.headers)\n    for (const key in extraOptions.headers)\n      headers[key.toLowerCase()] = extraOptions.headers[key];\n  const serializedBody = serializeBody(operation, body);\n  if (typeof serializedBody === 'string' && !headers['content-type'])\n    headers['content-type'] = 'application/json';\n  return {\n    ...extraOptions,\n    method: serializedBody ? 'POST' : 'GET',\n    body: serializedBody,\n    headers,\n  };\n};\n","import { Source, fromAsyncIterable, filter, pipe } from 'wonka';\nimport { Operation, OperationResult, ExecutionResult } from '../types';\nimport { makeResult, makeErrorResult, mergeResultPatch } from '../utils';\n\nconst decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : null;\nconst boundaryHeaderRe = /boundary=\"?([^=\";]+)\"?/i;\nconst eventStreamRe = /data: ?([^\\n]+)/;\n\ntype ChunkData = Buffer | Uint8Array;\n\n// NOTE: We're avoiding referencing the `Buffer` global here to prevent\n// auto-polyfilling in Webpack\nconst toString = (input: Buffer | ArrayBuffer): string =>\n  input.constructor.name === 'Buffer'\n    ? (input as Buffer).toString()\n    : decoder!.decode(input as ArrayBuffer);\n\nasync function* streamBody(response: Response): AsyncIterableIterator<string> {\n  if (response.body![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any)\n      yield toString(chunk as ChunkData);\n  } else {\n    const reader = response.body!.getReader();\n    let result: ReadableStreamReadResult<ChunkData>;\n    try {\n      while (!(result = await reader.read()).done) yield toString(result.value);\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nasync function* split(\n  chunks: AsyncIterableIterator<string>,\n  boundary: string\n): AsyncIterableIterator<string> {\n  let buffer = '';\n  let boundaryIndex: number;\n  for await (const chunk of chunks) {\n    buffer += chunk;\n    while ((boundaryIndex = buffer.indexOf(boundary)) > -1) {\n      yield buffer.slice(0, boundaryIndex);\n      buffer = buffer.slice(boundaryIndex + boundary.length);\n    }\n  }\n}\n\nasync function* parseJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  yield JSON.parse(await response.text());\n}\n\nasync function* parseEventStream(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  let payload: any;\n  for await (const chunk of split(streamBody(response), '\\n\\n')) {\n    const match = chunk.match(eventStreamRe);\n    if (match) {\n      const chunk = match[1];\n      try {\n        yield (payload = JSON.parse(chunk));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n      if (payload && !payload.hasNext) break;\n    }\n  }\n  if (payload && payload.hasNext) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMultipartMixed(\n  contentType: string,\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const boundaryHeader = contentType.match(boundaryHeaderRe);\n  const boundary = '--' + (boundaryHeader ? boundaryHeader[1] : '-');\n  let isPreamble = true;\n  let payload: any;\n  for await (let chunk of split(streamBody(response), '\\r\\n' + boundary)) {\n    if (isPreamble) {\n      isPreamble = false;\n      const preambleIndex = chunk.indexOf(boundary);\n      if (preambleIndex > -1) {\n        chunk = chunk.slice(preambleIndex + boundary.length);\n      } else {\n        continue;\n      }\n    }\n    try {\n      yield (payload = JSON.parse(chunk.slice(chunk.indexOf('\\r\\n\\r\\n') + 4)));\n    } catch (error) {\n      if (!payload) throw error;\n    }\n    if (payload && !payload.hasNext) break;\n  }\n  if (payload && payload.hasNext) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* fetchOperation(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n) {\n  let networkMode = true;\n  let abortController: AbortController | void;\n  let result: OperationResult | null = null;\n  let response: Response | void;\n\n  try {\n    if (typeof AbortController !== 'undefined') {\n      fetchOptions.signal = (abortController = new AbortController()).signal;\n    }\n\n    // Delay for a tick to give the Client a chance to cancel the request\n    // if a teardown comes in immediately\n    yield await Promise.resolve();\n\n    response = await (operation.context.fetch || fetch)(url, fetchOptions);\n    const contentType = response.headers.get('Content-Type') || '';\n\n    let results: AsyncIterable<ExecutionResult>;\n    if (/multipart\\/mixed/i.test(contentType)) {\n      results = parseMultipartMixed(contentType, response);\n    } else if (/text\\/event-stream/i.test(contentType)) {\n      results = parseEventStream(response);\n    } else if (!/text\\//i.test(contentType)) {\n      results = parseJSON(response);\n    } else {\n      throw new Error(await response.text());\n    }\n\n    for await (const payload of results) {\n      result = result\n        ? mergeResultPatch(result, payload, response)\n        : makeResult(operation, payload, response);\n      networkMode = false;\n      yield result;\n      networkMode = true;\n    }\n\n    if (!result) {\n      yield (result = makeResult(operation, {}, response));\n    }\n  } catch (error: any) {\n    if (!networkMode) {\n      throw error;\n    }\n\n    yield makeErrorResult(\n      operation,\n      response &&\n        (response.status < 200 || response.status >= 300) &&\n        response.statusText\n        ? new Error(response.statusText)\n        : error,\n      response\n    );\n  } finally {\n    if (abortController) abortController.abort();\n  }\n}\n\n/** Makes a GraphQL HTTP request to a given API by wrapping around the Fetch API.\n *\n * @param operation - The {@link Operation} that should be sent via GraphQL over HTTP.\n * @param url - The endpoint URL for the GraphQL HTTP API.\n * @param fetchOptions - The {@link RequestInit} fetch options for the request.\n * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults}.\n *\n * @remarks\n * This utility defines how all built-in fetch exchanges make GraphQL HTTP requests,\n * supporting multipart incremental responses, cancellation and other smaller\n * implementation details.\n *\n * If you’re implementing a modified fetch exchange for a GraphQL over HTTP API\n * it’s recommended you use this utility.\n *\n * Hint: This function does not use the passed `operation` to create or modify the\n * `fetchOptions` and instead expects that the options have already been created\n * using {@link makeFetchOptions} and modified as needed.\n *\n * @throws\n * If the `fetch` polyfill or globally available `fetch` function doesn’t support\n * streamed multipart responses while trying to handle a `multipart/mixed` GraphQL response,\n * the source will throw “Streaming requests unsupported”.\n * This shouldn’t happen in modern browsers and Node.js.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport function makeFetchSource(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n): Source<OperationResult> {\n  return pipe(\n    fromAsyncIterable(fetchOperation(operation, url, fetchOptions)),\n    filter((result): result is OperationResult => !!result)\n  );\n}\n"],"names":["rehydrateGraphQlError","error","extensions","name","message","graphql_web","GraphQLError","nodes","source","positions","path","CombinedError","Error","constructor","input","graphQLErrors","map","normalizedGraphQLErrors","networkErr","graphQlErrs","super","this","networkError","response","toString","phash","x","seed","l","length","i","h","charCodeAt","seen","Set","WeakMap","has","stringify","JSON","toJSON","_out","Array","out","value","FileConstructor","NoopConstructor","BlobConstructor","keys","sort","Object","Math","random","slice","cache","set","key","__key","add","_key","_value","delete","extract","isArray","stringifyVariables","clear","File","Blob","SOURCE_NAME","GRAPHQL_STRING_RE","str","idx","replace","REPLACE_CHAR_RE","prints","Map","sanitizeDocument","stringifyDocument","node","printed","loc","get","body","print","start","hashDocument","definitions","operationName","getOperationName","keyDocument","query","docs","parse","Kind","OPERATION_DEFINITION","undefined","makeResult","operation","result","kind","data","errors","hasNext","stale","deepMerge","target","mergeResultPatch","prevResult","nextResult","hasExtensions","incremental","withData","patch","push","assign","part","prop","items","startIndex","_l","_i","makeErrorResult","decoder","TextDecoder","boundaryHeaderRe","async","streamBody","Symbol","asyncIterator","chunk","getReader","reader","read","done","cancel","split","chunks","boundary","boundaryIndex","buffer","indexOf","exports","makeFetchSource","createRequest","_query","_variables","variables","printedVars","getOperationType","request","makeFetchBody","persistedQuery","miss","isAPQ","headers","makeFetchOptions","accept","context","fetchOptions","extraOptions","toLowerCase","preferGetMethod","json","extractFiles","size","files","form","append","FormData","file","values","index","serializeBody","serializedBody","method","url","wonka","filter","fromAsyncIterable","abortController","networkMode","AbortController","signal","contentType","fetch","boundaryHeader","match","isPreamble","parseMultipartMixed","payload","preambleIndex","test","parseEventStream","_chunk","results","text","parseJSON","status","statusText","abort","fetchOperation","useGETMethod","URL","searchParams","finalUrl"],"mappings":"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"}